# Form implementation generated from reading ui file 'Todolist.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

#Kütüphaneler PyQt6 GUI için
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtCore import QCoreApplication


#Ana pencereyi oluşturan class
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        #Ana Pencerenin özellikleri
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1111, 657)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icons8-todo-list-50.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        MainWindow.setWindowIcon(icon)
        #Ortalama Widgetı
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        #Taskları tutan listeWidget
        self.listWidget = QtWidgets.QListWidget(parent=self.centralwidget)
        self.listWidget.setGeometry(QtCore.QRect(480, 140, 451, 501))
        self.listWidget.setObjectName("listWidget")

        self.file_ekle()
          


        #Labelı tutan widget
        self.label = QtWidgets.QLabel(parent=self.centralwidget)
        self.label.setGeometry(QtCore.QRect(480, 100, 451, 31))
        font = QtGui.QFont()
        font.setFamily("Gabriola")
        font.setPointSize(25)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label.setObjectName("label")
       #Labelı tutan widget
        self.label_2 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(20, 16, 921, 31))
        font = QtGui.QFont()
        font.setFamily("Gabriola")
        font.setPointSize(25)
        self.label_2.setFont(font)
        self.label_2.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_2.setObjectName("label_2")
        #Task ekleme butonu
        self.pushButton = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(150, 300, 171, 71))
        font = QtGui.QFont()
        font.setFamily("Gabriola")
        font.setPointSize(25)
        self.pushButton.setFont(font)
        self.pushButton.clicked.connect(self.ekle)
        self.pushButton.setObjectName("pushButton")
        #Task yazma yeri
        self.textEdit = QtWidgets.QTextEdit(parent=self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(50, 220, 361, 51))
        font = QtGui.QFont()
        font.setFamily("Gabriola")
        font.setPointSize(15)
        self.textEdit.setFont(font)
        self.textEdit.setObjectName("textEdit")
        #Task silme butonu
        self.pushButton_2 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(150, 390, 171, 71))
        font = QtGui.QFont()
        font.setFamily("Gabriola")
        font.setPointSize(25)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setObjectName("pushButton_2") 
        self.pushButton_2.clicked.connect(self.sil)
        #Taskların hepsini silme butonu
        self.pushButton_3 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(150, 480, 171, 71))
        font = QtGui.QFont()
        font.setFamily("Gabriola")
        font.setPointSize(25)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(self.hepsinisil)
        #Exit butonu
        self.pushButton_4 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(150, 570, 171, 71))
        font = QtGui.QFont()
        font.setFamily("Gabriola")
        font.setPointSize(25)
        self.pushButton_4.setFont(font)
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.clicked.connect(self.cikis)
        self.checkbox_texts =list()
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
    #ekle butonuna eklenen fonksiyon
    def bos_satir_kaldir(self,file_path):
        with open(file_path, 'r') as file:
         lines = file.readlines()
        non_empty_lines = [line.strip() for line in lines if line.strip()]
        with open(file_path, 'w') as file:
         file.write('\n'.join(non_empty_lines))
    # Boş satırları filtrele
       
    def file_read(self):
        liste=list()
        dosya=open("veri.txt","r")
        self.bos_satir_kaldir("veri.txt")
        for satir in dosya:
          liste.append(satir)
        dosya.close()
        return liste
    def file_ekle(self):
        liste2=self.file_read()
        for i in liste2:
            checkbox=checkbox = QtWidgets.QCheckBox(i)
            checkbox.stateChanged.connect(lambda state, checkbox=checkbox: self.degistir(state, checkbox))
            item = QtWidgets.QListWidgetItem()
            item.setSizeHint(checkbox.sizeHint())  
            self.listWidget.addItem(item)
            self.listWidget.setItemWidget(item, checkbox)
    def file_yaz(self):
        
        for i in range(self.listWidget.count()):
            item = self.listWidget.item(i)
            if item is not None:
                widget = self.listWidget.itemWidget(item)
                self.checkbox_texts.append(widget.text())
        dosya=open("veri.txt","w")
        for x in self.checkbox_texts:
            dosya.write(x)
            dosya.write("\n")
            
        dosya.close()
                
    def ekle(self):
        #todo ismini alma
        todoname = self.textEdit.toPlainText().strip() 
        if todoname:
            if not any(todoname == self.listWidget.item(i).text() for i in range(self.listWidget.count())):
                #checkbox oluşturma
                checkbox = QtWidgets.QCheckBox(todoname)
                #checkbox durumu değiştirdiğinde degistir fonksiyonuna baglama
                checkbox.stateChanged.connect(lambda state, checkbox=checkbox: self.degistir(state, checkbox))
                #Listeye checkbox ekleme
                item = QtWidgets.QListWidgetItem()
                item.setSizeHint(checkbox.sizeHint())  
                self.listWidget.addItem(item)
                self.listWidget.setItemWidget(item, checkbox)  
    #degistir fonksiyonu checkbox değiştiğinde çalışıyor
    def degistir(self, state, checkbox):
        if state != checkbox.isChecked():
           #eğer checkbox true durumundaysa üstünü çizer
           font = checkbox.font()
           font.setStrikeOut(True)
           checkbox.setFont(font)
           
        else:
           #eğer checkbox false durumundaysa eski haline döner
           font = checkbox.font()
           font.setStrikeOut(False)
           checkbox.setFont(font)
        
    def sil(self):
        #seçilen checkboxu silme fonksiyonu
        secili=self.listWidget.currentItem()
        if secili:
            row = self.listWidget.row(secili)
            self.listWidget.takeItem(row)
  
        else:
           print("Öge Bulunamadı")
        
    def hepsinisil(self):
        #fonksiyon listedeki bütün to do ları satıyor
        self.listWidget.clear()
    def cikis(self):
        #fonksiyon uygulamadan çıkıyor
        self.file_yaz()    
        QCoreApplication.quit()    
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "To-Do List"))
        self.label.setText(_translate("MainWindow", "Tasks"))
        self.label_2.setText(_translate("MainWindow", "TO DO LİST PROGRAMI"))
        self.pushButton.setText(_translate("MainWindow", "Add Task"))
        self.textEdit.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"hr { height: 1px; border-width: 0; }\n"
"li.unchecked::marker { content: \"\\2610\"; }\n"
"li.checked::marker { content: \"\\2612\"; }\n"
"</style></head><body style=\" font-family:\'Gabriola\'; font-size:15pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.pushButton_2.setText(_translate("MainWindow", "Delete Task"))
        self.pushButton_3.setText(_translate("MainWindow", "Delete All Tasks"))
        self.pushButton_4.setText(_translate("MainWindow", "Exit"))


if __name__ == "__main__":
    import sys
    #Uygulamayı çalıştıran kısım
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
